<?xml version="1.0" encoding="UTF-8"?>
<Invoice xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:xades="http://uri.etsi.org/01903/v1.3.2#" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xsi:schemaLocation="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2 ..\xsdrt\maindoc\UBL-Invoice-2.1.xsd">
  <ext:UBLExtensions>
    <ext:UBLExtension>
      <ext:ExtensionContent />
    </ext:UBLExtension>
  </ext:UBLExtensions>
  <cbc:UBLVersionID>2.1</cbc:UBLVersionID>
  <cbc:CustomizationID>TR1.2</cbc:CustomizationID>
  <cbc:ProfileID>HKS</cbc:ProfileID>
  <cbc:ID>%INVOICE_ID%</cbc:ID>
  <cbc:CopyIndicator>false</cbc:CopyIndicator>
  <cbc:UUID>%INVOICE_UUID%</cbc:UUID>
  <cbc:IssueDate>2022-01-10</cbc:IssueDate>
  <cbc:IssueTime>19:32:04</cbc:IssueTime>
  <cbc:InvoiceTypeCode>SATIS</cbc:InvoiceTypeCode>
  <cbc:Note>İkiYuzYediTLYirmiKR</cbc:Note>
  <cbc:Note>Banka: - IBAN TR12 3456 2500 3600 7800 2100 19 TL hesabı</cbc:Note>
  <cbc:Note>P/V: Veresiye</cbc:Note>
  <cbc:Note>Toplam Kap    :         10</cbc:Note>
  <cbc:Note>Toplam Dara   :      0,000</cbc:Note>
  <cbc:Note>Toplam Darali :    100,000</cbc:Note>
  <cbc:Note>Toplam Miktar :    100,000</cbc:Note>
  <cbc:Note>Referans No : 2982      </cbc:Note>
  <cbc:Note>Cari bakiye : 1.577.602,51 Borç</cbc:Note>
  <cbc:Note>Komisyoncudur</cbc:Note>
  <cbc:DocumentCurrencyCode>TRY</cbc:DocumentCurrencyCode>
  <cbc:LineCountNumeric>2</cbc:LineCountNumeric>
  <cac:DespatchDocumentReference>
    <cbc:ID>IRR2022000000002</cbc:ID>
    <cbc:IssueDate>2022-01-10</cbc:IssueDate>
  </cac:DespatchDocumentReference>
  <cac:AdditionalDocumentReference>
    <cbc:ID>1234</cbc:ID>
    <cbc:IssueDate>2022-01-10</cbc:IssueDate>
    <cbc:DocumentType>XSLT</cbc:DocumentType>
    <cac:Attachment>
      <cbc:EmbeddedDocumentBinaryObject characterSetCode="UTF-8" encodingCode="Base64" filename="52CB17CC-1389-4BA9-B486-3B05BC13D31F.xslt" mimeCode="application/xml"></cbc:EmbeddedDocumentBinaryObject>
    </cac:Attachment>
  </cac:AdditionalDocumentReference>
  <cac:AdditionalDocumentReference>
    <cbc:ID>67 ZB 281</cbc:ID>
    <cbc:IssueDate>2022-01-10</cbc:IssueDate>
    <cbc:DocumentType>Plaka</cbc:DocumentType>
  </cac:AdditionalDocumentReference>
  <cac:Signature>
    <cbc:ID schemeID="VKN_TCKN">4840847211</cbc:ID>
    <cac:SignatoryParty>
      <cac:PartyIdentification>
        <cbc:ID schemeID="VKN">4840847211</cbc:ID>
      </cac:PartyIdentification>
      <cac:PartyName>
        <cbc:Name>IZIBIZ TEST DENEME LTD. ŞTİ.</cbc:Name>
      </cac:PartyName>
      <cac:PostalAddress>
        <cbc:Room>29/A</cbc:Room>
        <cbc:StreetName>Yukarı Hal Mh. Tarlabaşı cad. timurlenk sok. deneme test hali cad. 100/2 KOCATEPE</cbc:StreetName>
        <cbc:BuildingNumber>B blok</cbc:BuildingNumber>
        <cbc:CitySubdivisionName>BAYRAMPAŞA</cbc:CitySubdivisionName>
        <cbc:CityName>İSTANBUL</cbc:CityName>
        <cbc:PostalZone>34501</cbc:PostalZone>
        <cac:Country>
          <cbc:Name>Turkey.</cbc:Name>
        </cac:Country>
      </cac:PostalAddress>
    </cac:SignatoryParty>
    <cac:DigitalSignatureAttachment>
      <cac:ExternalReference>
        <cbc:URI>#Signature_52CB17CC-1389-4BA9-B486-3B05BC13D31F</cbc:URI>
      </cac:ExternalReference>
    </cac:DigitalSignatureAttachment>
  </cac:Signature>
  <cac:AccountingSupplierParty>
    <cac:Party>
      <cbc:WebsiteURI>www.asa.cas</cbc:WebsiteURI>
      <cac:PartyIdentification>
        <cbc:ID schemeID="VKN">4840847211</cbc:ID>
      </cac:PartyIdentification>
      <cac:PartyIdentification>
        <cbc:ID schemeID="MERSISNO">mersis-2221</cbc:ID>
      </cac:PartyIdentification>
      <cac:PartyIdentification>
        <cbc:ID schemeID="TICARETSICILNO">12345</cbc:ID>
      </cac:PartyIdentification>
      <cac:PartyName>
        <cbc:Name>IZIBIZ TEST DENEME LTD. ŞTİ.</cbc:Name>
      </cac:PartyName>
      <cac:PostalAddress>
        <cbc:Room>29/A</cbc:Room>
        <cbc:StreetName>Yukarı Hal Mh. Tarlabaşı cad. timurlenk sok. deneme test hali cad. 100/2 KOCATEPE</cbc:StreetName>
        <cbc:BuildingNumber>B blok</cbc:BuildingNumber>
        <cbc:CitySubdivisionName>BAYRAMPAŞA</cbc:CitySubdivisionName>
        <cbc:CityName>İSTANBUL</cbc:CityName>
        <cbc:PostalZone>34501</cbc:PostalZone>
        <cac:Country>
          <cbc:Name>Turkey.</cbc:Name>
        </cac:Country>
      </cac:PostalAddress>
      <cac:PartyTaxScheme>
        <cac:TaxScheme>
          <cbc:Name>5 OCAK</cbc:Name>
        </cac:TaxScheme>
      </cac:PartyTaxScheme>
      <cac:Contact>
        <cbc:Telephone>216 666 66 66</cbc:Telephone>
        <cbc:ElectronicMail>ulusoylar29@hotmail.com</cbc:ElectronicMail>
      </cac:Contact>
    </cac:Party>
  </cac:AccountingSupplierParty>
  <cac:AccountingCustomerParty>
    <cac:Party>
      <cbc:WebsiteURI>WWW.DDD.COM</cbc:WebsiteURI>
      <cac:PartyIdentification>
        <cbc:ID schemeID="VKN">4840847211</cbc:ID>
      </cac:PartyIdentification>
      <cac:PartyName>
        <cbc:Name>İZİBİZ TEST</cbc:Name>
      </cac:PartyName>
      <cac:PostalAddress>
        <cbc:StreetName>MEŞRUTİYET MEYDANI NO:1 MERKEZ</cbc:StreetName>
        <cbc:CitySubdivisionName>ÇAYCUMA</cbc:CitySubdivisionName>
        <cbc:CityName>ZONGULDAK</cbc:CityName>
        <cac:Country>
          <cbc:Name>Turkey.</cbc:Name>
        </cac:Country>
      </cac:PostalAddress>
      <cac:PartyTaxScheme>
        <cac:TaxScheme>
          <cbc:Name>ANTALYA KURUMLAR</cbc:Name>
        </cac:TaxScheme>
      </cac:PartyTaxScheme>
      <cac:Contact>
        <cbc:Telephone>000 444 55 11</cbc:Telephone>
      </cac:Contact>
    </cac:Party>
  </cac:AccountingCustomerParty>
  <cac:PaymentMeans>
    <cbc:PaymentMeansCode>1</cbc:PaymentMeansCode>
  </cac:PaymentMeans>
  <cac:TaxTotal>
    <cbc:TaxAmount currencyID="TRY">17.20</cbc:TaxAmount>
    <cac:TaxSubtotal>
      <cbc:TaxableAmount currencyID="TRY">100.00</cbc:TaxableAmount>
      <cbc:TaxAmount currencyID="TRY">1.00</cbc:TaxAmount>
      <cbc:CalculationSequenceNumeric>1.0</cbc:CalculationSequenceNumeric>
      <cbc:Percent>1.00</cbc:Percent>
      <cac:TaxCategory>
        <cac:TaxScheme>
          <cbc:Name>Gerçek usülde katma değer vergisi</cbc:Name>
          <cbc:TaxTypeCode>0015</cbc:TaxTypeCode>
        </cac:TaxScheme>
      </cac:TaxCategory>
    </cac:TaxSubtotal>
    <cac:TaxSubtotal>
      <cbc:TaxableAmount currencyID="TRY">90.00</cbc:TaxableAmount>
      <cbc:TaxAmount currencyID="TRY">16.20</cbc:TaxAmount>
      <cbc:CalculationSequenceNumeric>1.0</cbc:CalculationSequenceNumeric>
      <cbc:Percent>18.00</cbc:Percent>
      <cac:TaxCategory>
        <cac:TaxScheme>
          <cbc:Name>Gerçek usülde katma değer vergisi</cbc:Name>
          <cbc:TaxTypeCode>0015</cbc:TaxTypeCode>
        </cac:TaxScheme>
      </cac:TaxCategory>
    </cac:TaxSubtotal>
  </cac:TaxTotal>
  <cac:LegalMonetaryTotal>
    <cbc:LineExtensionAmount currencyID="TRY">190.00</cbc:LineExtensionAmount>
    <cbc:TaxExclusiveAmount currencyID="TRY">190.00</cbc:TaxExclusiveAmount>
    <cbc:TaxInclusiveAmount currencyID="TRY">207.20</cbc:TaxInclusiveAmount>
    <cbc:PayableAmount currencyID="TRY">207.20</cbc:PayableAmount>
  </cac:LegalMonetaryTotal>
  <cac:InvoiceLine>
    <cbc:ID>1</cbc:ID>
    <cbc:Note>    10      100,000        0,000</cbc:Note>
    <cbc:InvoicedQuantity unitCode="KGM">100.000</cbc:InvoicedQuantity>
    <cbc:LineExtensionAmount currencyID="TRY">100.00</cbc:LineExtensionAmount>
    <cac:TaxTotal>
      <cbc:TaxAmount currencyID="TRY">1.00</cbc:TaxAmount>
      <cac:TaxSubtotal>
        <cbc:TaxableAmount currencyID="TRY">100.00</cbc:TaxableAmount>
        <cbc:TaxAmount currencyID="TRY">1.00</cbc:TaxAmount>
        <cbc:Percent>1.00</cbc:Percent>
        <cac:TaxCategory>
          <cac:TaxScheme>
            <cbc:Name>KDV</cbc:Name>
            <cbc:TaxTypeCode>0015</cbc:TaxTypeCode>
          </cac:TaxScheme>
        </cac:TaxCategory>
      </cac:TaxSubtotal>
    </cac:TaxTotal>
    <cac:Item>
      <cbc:Name>ELMA AMASYA</cbc:Name>
      <cbc:BrandName>10</cbc:BrandName>
      <cac:SellersItemIdentification>
        <cbc:ID>AMA</cbc:ID>
      </cac:SellersItemIdentification>
    </cac:Item>
    <cac:Price>
      <cbc:PriceAmount currencyID="TRY">1.000</cbc:PriceAmount>
    </cac:Price>
  </cac:InvoiceLine>
  <cac:InvoiceLine>
    <cbc:ID>2</cbc:ID>
    <cbc:Note>     1        0,000        0,000</cbc:Note>
    <cbc:InvoicedQuantity unitCode="NIU">1</cbc:InvoicedQuantity>
    <cbc:LineExtensionAmount currencyID="TRY">90.00</cbc:LineExtensionAmount>
    <cac:TaxTotal>
      <cbc:TaxAmount currencyID="TRY">16.20</cbc:TaxAmount>
      <cac:TaxSubtotal>
        <cbc:TaxableAmount currencyID="TRY">90.00</cbc:TaxableAmount>
        <cbc:TaxAmount currencyID="TRY">16.20</cbc:TaxAmount>
        <cbc:Percent>18.00</cbc:Percent>
        <cac:TaxCategory>
          <cac:TaxScheme>
            <cbc:Name>KDV</cbc:Name>
            <cbc:TaxTypeCode>0015</cbc:TaxTypeCode>
          </cac:TaxScheme>
        </cac:TaxCategory>
      </cac:TaxSubtotal>
    </cac:TaxTotal>
    <cac:Item>
      <cbc:Name>YÜKLEME BEDELİ</cbc:Name>
      <cac:SellersItemIdentification>
        <cbc:ID>YUK</cbc:ID>
      </cac:SellersItemIdentification>
    </cac:Item>
    <cac:Price>
      <cbc:PriceAmount currencyID="TRY">90.000</cbc:PriceAmount>
    </cac:Price>
  </cac:InvoiceLine>
</Invoice>
